
<!doctype html>

<html lang="en">
<head>

  <style>
    #mapid { height: 500px; width: 100%};
  </style>
</head>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.5.1/leaflet.css"/>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.2.12/leaflet-routing-machine.css"/>
<link rel="icon" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.2.12/leaflet.routing.icons.png"/>
<link rel="icon" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.2.12/routing-icon.png"/>
<link rel="icon" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.5.1/images/layers-2x.png"/>


<body>
<div id="mapid"></div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.5.1/leaflet.js">
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.2.12/leaflet-routing-machine.js">
</script>

<script>
//define button to add to map
  var locateButton = L.Control.extend({
    options: {
      position: 'topright'
    },
    onAdd: function (map) {
        var btn = document.createElement("BUTTON");
        btn.setAttribute('class', 'btn btn-primary')
        btn.innerHTML = "Use My Location"
        btn.setAttribute('onclick', "map.locate()")
        return btn;
      },
  });

   var greenIcon = new L.Icon({
     iconUrl: '<%= image_path('tree.png')%>',
     shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
     iconSize: [25, 41],
     iconAnchor: [12, 41],
     popupAnchor: [1, -34],
     shadowSize: [41, 41]
   });

   var greyIcon = new L.Icon({
     iconUrl: '<%= image_path('congress.png')%>',
     shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
     iconSize: [25, 41],
     iconAnchor: [12, 41],
     popupAnchor: [1, -34],
     shadowSize: [41, 41]
   });

   var violetIcon = new L.Icon({
     iconUrl: '<%= image_path('theater.png')%>',
     shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
     iconSize: [25, 41],
     iconAnchor: [12, 41],
     popupAnchor: [1, -34],
     shadowSize: [41, 41]
   });

   var orangeIcon = new L.Icon({
     iconUrl: '<%= image_path('cramschool.png')%>',
     shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
     iconSize: [25, 41],
     iconAnchor: [12, 41],
     popupAnchor: [1, -34],
     shadowSize: [41, 41]
   });

   var userIcon = new L.Icon({
     iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png',
     shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
     iconSize: [25, 41],
     iconAnchor: [12, 41],
     popupAnchor: [1, -34],
     shadowSize: [41, 41]
   });

function selectMarkerColor(category){
  if (category === 'park') {
    return greenIcon
  } else if (category ==='theater') {
    return violetIcon
  } else if (category ==='government'){
    return greyIcon
  } else {
    return orangeIcon
  }
};

//empty vars to make layers
var theaters = []
var museums = []
var parks = []
var governments = []

fetch('api/v1/landmarks')
.then(function(response) {
  return response.json();
})
.then(function(myJson) {
  //iterate over landmarks, make points
  myJson['data'].forEach(function(landmark){
    let marker = L.marker([landmark['attributes']['lat'], landmark['attributes']['long']],{
      icon: selectMarkerColor(landmark['attributes']['category'])
    });
  //add popups to landmarks
  let name = landmark['attributes']['name']
  let id = landmark['id']
    marker.bindPopup(name.link(`/landmarks/${id}`) + `<br><button class="location_button" onclick="navigateTo(${landmark['attributes']['lat']}, ${landmark['attributes']['long']})" >Directions</button>`)
  if (landmark['attributes']['category'] === 'theater') {theaters.push(marker)}
  if (landmark['attributes']['category'] === 'museum') {museums.push(marker)}
  if (landmark['attributes']['category'] === 'park') {parks.push(marker)}
  if (landmark['attributes']['category'] === 'government') {governments.push(marker)}
  });
})
//make layers for map
.then(function(response){
  var museumMarkers = L.layerGroup(museums)
  var theaterMarkers = L.layerGroup(theaters)
  var parkMarkers = L.layerGroup(parks)
  var governmentMarkers = L.layerGroup(governments)
  var allMarkers = L.layerGroup(museums.concat(theaters).concat(parks).concat(governments))
//Make overlay interface
  var overlayMaps = {
      "museums": museumMarkers,
      "theaters": theaterMarkers,
      "parks": parkMarkers,
      "government": governmentMarkers,
      "all": allMarkers
  };
//make map
   map = L.map('mapid',{layers: [museumMarkers, theaterMarkers, parkMarkers, governmentMarkers]}).setView([39.7392358, -104.990251], 15)
   map.addControl(new locateButton());
  L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
  attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
  maxZoom: 18,
  zoomOffset: -1,
  tileSize: 512,
  id: 'mapbox/streets-v11',
  accessToken: '<%=ENV['MAPBOX_API_KEY']%>'
  }).addTo(map);
  map.on('locationerror', onLocationError);
  map.on('locationfound', onLocationFound);
  L.control.layers(overlayMaps).addTo(map);
});

//add my location popup When User clicks locate me
function onLocationFound(e) {
  map.setView(e.latlng, 17)
  var radius = e.accuracy;
  currentPosition = L.marker(e.latlng,{icon: userIcon}).addTo(map)
  .bindPopup("You are within " + radius + " meters from this point").openPopup();
}
//Display error if cannot find user
function onLocationError(e) {
  alert(e.message);
}

//Set route to null, allows us to change route
var routingControl = null
function navigateTo(lat,long){
  navigator.geolocation.getCurrentPosition(function(position) {
    var my_lat = position.coords.latitude;
    var my_lng = position.coords.longitude;
    if (routingControl){
      routingControl.setWaypoints([]);
      map.removeControl(routingControl);
      routingControl = null;
    }
 //draw line on map from mapbox/walking
    routingControl = L.Routing.control({
      waypoints: [
      L.latLng(my_lat, my_lng),
      L.latLng(lat, long)
      ],
      router: L.Routing.mapbox('<%=ENV['MAPBOX_API_KEY']%>',{profile: 'mapbox/cycling'}),
      createMarker: function() { return null; },
      lineOptions: { addWaypoints: false },
      collapsible: true
    })
    routingControl.addTo(map);
  });
}

function searchLandmark(){
  let input = document.getElementById('searchTerm').value
  fetch(`api/v1/landmarks/${input}`)
  .then(function(response) {
    return response.json();
  })
  .then(function(myJson) {
    if (myJson['data']===null){
      window.alert('Please try a different search')
    } else{
    map.flyTo([parseFloat(myJson['data']['attributes']['lat']),parseFloat(myJson['data']['attributes']['long'])], 18)
  }
  })
};

 </script>

</body>
</html>
